import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  Alert,
  Button,
  TextInput,
  FlatList,
  StyleSheet,
} from 'react-native';
import SQLite from 'react-native-sqlite-storage';

const db = SQLite.openDatabase({
  name: 'test.db',
  location: 'default',
  createFromLocation: '~test.db',
});

const LoginScreen = () => {
  const [users, setUsers] = useState([]);
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [editingUserId, setEditingUserId] = useState(null);

  useEffect(() => {
    db.transaction(tx => {
      tx.executeSql(
        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT, password TEXT)',
      );
    });
  }, []);
  const cancelUpdate = () => {
    setEditingUserId(null);
    setName('');
    setEmail('');
    setPassword('');
  };
  const saveUser = () => {
    if (!name || !email || !password) {
      Alert.alert('Please fill all the fields');
      return;
    }

    const updatedUser = {
      id: editingUserId,
      name,
      email,
      password,
    };

    db.transaction(
      tx => {
        tx.executeSql(
          'UPDATE users SET name=?, email=?, password=? WHERE id=?',
          [
            updatedUser.name,
            updatedUser.email,
            updatedUser.password,
            updatedUser.id,
          ],
          () => {
            Alert.alert('Success', 'User updated successfully');
            setEditingUserId(null);
            setName('');
            setEmail('');
            setPassword('');
            fetchUsers();
          },
          error => {
            console.log(error);
            Alert.alert('Error', 'Failed to update user');
          },
        );
      },
      error => console.log(error),
    );
  };

  const addUser = () => {
    if (editingUserId) {
      db.transaction(tx => {
        tx.executeSql(
          'UPDATE users SET name=?, email=?, password=? WHERE id=?',
          [name, email, password, editingUserId],
          (tx, results) => {
            if (results.rowsAffected > 0) {
              const newUsers = [...users];
              const index = newUsers.findIndex(
                user => user.id === editingUserId,
              );
              newUsers[index] = {id: editingUserId, name, email, password};
              setUsers(newUsers);
              setName('');
              setEmail('');
              setPassword('');
              setEditingUserId(null);
            }
          },
        );
      });
    } else {
      db.transaction(tx => {
        tx.executeSql(
          'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
          [name, email, password],
          (tx, results) => {
            if (results.rowsAffected > 0) {
              setUsers([
                ...users,
                {id: results.insertId, name, email, password},
              ]);
              setName('');
              setEmail('');
              setPassword('');
            }
          },
        );
      });
    }
  };

  const fetchUsers = () => {
    db.transaction(tx => {
      tx.executeSql('SELECT * FROM users', [], (tx, results) => {
        const len = results.rows.length;
        const users = [];
        for (let i = 0; i < len; i++) {
          const row = results.rows.item(i);
          users.push(row);
        }
        setUsers(users);
      });
    });
  };

  const deleteUser = userId => {
    db.transaction(tx => {
      tx.executeSql('DELETE FROM users WHERE id=?', [userId], (tx, results) => {
        if (results.rowsAffected > 0) {
          const newUsers = users.filter(user => user.id !== userId);
          setUsers(newUsers);
        }
      });
    });
  };

  const editUser = userId => {
    const user = users.find(user => user.id === userId);
    setName(user.name);
    setEmail(user.email);
    setPassword(user.password);
    setEditingUserId(userId);
  };
  return (
    <View style={styles.container}>
      <Text style={styles.title}>SQLite Example LoginScreen</Text>
      <Text style={styles.label}>Name:</Text>
      <TextInput
        style={styles.input}
        onChangeText={setName}
        value={name}
        placeholder="Enter name"
      />
      <Text style={styles.label}>Email:</Text>
      <TextInput
        style={styles.input}
        onChangeText={setEmail}
        value={email}
        placeholder="Enter email"
      />
      <Text style={styles.label}>Password:</Text>
      <TextInput
        style={styles.input}
        onChangeText={setPassword}
        value={password}
        placeholder="Enter password"
        secureTextEntry={true}
      />
      {editingUserId === null ? (
        <Button title="Add User" onPress={addUser} />
      ) : (
        <View style={styles.editButtonsContainer}>
          <Button title="Save" onPress={saveUser} />
          <Button title="Cancel" onPress={cancelUpdate} />
        </View>
      )}
      <Button style={styles.button} title="Fetch Users" onPress={fetchUsers} />
      <FlatList
        data={users}
        keyExtractor={item => item.id.toString()}
        renderItem={({item}) => (
          <View>
            <Text>{item.name}</Text>
            <Text>{item.email}</Text>
            <Text>{item.password}</Text>
            <Button title="Edit" onPress={() => editUser(item.id)} />
            <Button title="Delete" onPress={() => deleteUser(item.id)} />
          </View>
        )}
      />
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  label: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 20,
    paddingHorizontal: 10,
  },
  button: {
    marginTop: 20,
  },
  editButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
});

export default LoginScreen;
